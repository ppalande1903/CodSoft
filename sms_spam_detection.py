# -*- coding: utf-8 -*-
"""SMS SPAM DETECTION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JaolxQvbHQb8jXYPtP3_8pwrTzFaw03u
"""

!pip install sklearn

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

!pip install pandas

spam_sms = pd.read_csv('/content/spam.csv', encoding='latin-1')

print(spam_sms)

clean_spam_sms = spam_sms.where((pd.notnull(spam_sms)),'')

clean_spam_sms.loc[clean_spam_sms['v1'] == 'spam', 'v1',] = 0
clean_spam_sms.loc[clean_spam_sms['v1'] == 'ham', 'v1',] = 1

x = clean_spam_sms['v1']
y = clean_spam_sms ['v2']

print(x)

print(y)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=3)

print(x_train.shape)
print(x_test.shape)

feature_extraction = TfidfVectorizer(min_df = 1, stop_words='english', lowercase=True)

y_train_features = feature_extraction.fit_transform(y_train)
y_test_features = feature_extraction.transform(y_test)



x_train = x_train.astype('int')
x_test = x_test.astype('int')

print(y_train_features)

sms = LogisticRegression()

sms.fit(y_train_features, x_train)

LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=100,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)

predictiontd = sms.predict(y_train_features)
accuracytd = accuracy_score(x_train, predictiontd)

predictiontest = sms.predict(y_test_features)
accuracytest = accuracy_score(x_test, predictiontest)

input_mail = ["Thanks for your subscription to Ringtone UK your mobile will be charged Â£5/month Please confirm by replying YES or NO. If you reply NO you will not be charged"]


input_data_features = feature_extraction.transform(input_mail)



prediction = sms.predict(input_data_features)
print(prediction)


if (prediction[0]==1):
  print('Ham mail')

else:
  print('Spam mail')

